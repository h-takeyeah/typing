// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/predicate"
	"ent/ent/score"
	"ent/ent/user"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeScore = "Score"
	TypeUser  = "User"
)

// ScoreMutation represents an operation that mutates the Score nodes in the graph.
type ScoreMutation struct {
	config
	op            Op
	typ           string
	id            *int
	keystrokes    *int
	addkeystrokes *int
	accuracy      *float64
	addaccuracy   *float64
	score         *float64
	addscore      *float64
	startedAt     *time.Time
	endedAt       *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Score, error)
	predicates    []predicate.Score
}

var _ ent.Mutation = (*ScoreMutation)(nil)

// scoreOption allows management of the mutation configuration using functional options.
type scoreOption func(*ScoreMutation)

// newScoreMutation creates new mutation for the Score entity.
func newScoreMutation(c config, op Op, opts ...scoreOption) *ScoreMutation {
	m := &ScoreMutation{
		config:        c,
		op:            op,
		typ:           TypeScore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScoreID sets the ID field of the mutation.
func withScoreID(id int) scoreOption {
	return func(m *ScoreMutation) {
		var (
			err   error
			once  sync.Once
			value *Score
		)
		m.oldValue = func(ctx context.Context) (*Score, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Score.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScore sets the old Score of the mutation.
func withScore(node *Score) scoreOption {
	return func(m *ScoreMutation) {
		m.oldValue = func(context.Context) (*Score, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScoreMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Score.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKeystrokes sets the "keystrokes" field.
func (m *ScoreMutation) SetKeystrokes(i int) {
	m.keystrokes = &i
	m.addkeystrokes = nil
}

// Keystrokes returns the value of the "keystrokes" field in the mutation.
func (m *ScoreMutation) Keystrokes() (r int, exists bool) {
	v := m.keystrokes
	if v == nil {
		return
	}
	return *v, true
}

// OldKeystrokes returns the old "keystrokes" field's value of the Score entity.
// If the Score object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScoreMutation) OldKeystrokes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeystrokes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeystrokes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeystrokes: %w", err)
	}
	return oldValue.Keystrokes, nil
}

// AddKeystrokes adds i to the "keystrokes" field.
func (m *ScoreMutation) AddKeystrokes(i int) {
	if m.addkeystrokes != nil {
		*m.addkeystrokes += i
	} else {
		m.addkeystrokes = &i
	}
}

// AddedKeystrokes returns the value that was added to the "keystrokes" field in this mutation.
func (m *ScoreMutation) AddedKeystrokes() (r int, exists bool) {
	v := m.addkeystrokes
	if v == nil {
		return
	}
	return *v, true
}

// ResetKeystrokes resets all changes to the "keystrokes" field.
func (m *ScoreMutation) ResetKeystrokes() {
	m.keystrokes = nil
	m.addkeystrokes = nil
}

// SetAccuracy sets the "accuracy" field.
func (m *ScoreMutation) SetAccuracy(f float64) {
	m.accuracy = &f
	m.addaccuracy = nil
}

// Accuracy returns the value of the "accuracy" field in the mutation.
func (m *ScoreMutation) Accuracy() (r float64, exists bool) {
	v := m.accuracy
	if v == nil {
		return
	}
	return *v, true
}

// OldAccuracy returns the old "accuracy" field's value of the Score entity.
// If the Score object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScoreMutation) OldAccuracy(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccuracy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccuracy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccuracy: %w", err)
	}
	return oldValue.Accuracy, nil
}

// AddAccuracy adds f to the "accuracy" field.
func (m *ScoreMutation) AddAccuracy(f float64) {
	if m.addaccuracy != nil {
		*m.addaccuracy += f
	} else {
		m.addaccuracy = &f
	}
}

// AddedAccuracy returns the value that was added to the "accuracy" field in this mutation.
func (m *ScoreMutation) AddedAccuracy() (r float64, exists bool) {
	v := m.addaccuracy
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccuracy resets all changes to the "accuracy" field.
func (m *ScoreMutation) ResetAccuracy() {
	m.accuracy = nil
	m.addaccuracy = nil
}

// SetScore sets the "score" field.
func (m *ScoreMutation) SetScore(f float64) {
	m.score = &f
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *ScoreMutation) Score() (r float64, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Score entity.
// If the Score object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScoreMutation) OldScore(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds f to the "score" field.
func (m *ScoreMutation) AddScore(f float64) {
	if m.addscore != nil {
		*m.addscore += f
	} else {
		m.addscore = &f
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *ScoreMutation) AddedScore() (r float64, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *ScoreMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetStartedAt sets the "startedAt" field.
func (m *ScoreMutation) SetStartedAt(t time.Time) {
	m.startedAt = &t
}

// StartedAt returns the value of the "startedAt" field in the mutation.
func (m *ScoreMutation) StartedAt() (r time.Time, exists bool) {
	v := m.startedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "startedAt" field's value of the Score entity.
// If the Score object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScoreMutation) OldStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ResetStartedAt resets all changes to the "startedAt" field.
func (m *ScoreMutation) ResetStartedAt() {
	m.startedAt = nil
}

// SetEndedAt sets the "endedAt" field.
func (m *ScoreMutation) SetEndedAt(t time.Time) {
	m.endedAt = &t
}

// EndedAt returns the value of the "endedAt" field in the mutation.
func (m *ScoreMutation) EndedAt() (r time.Time, exists bool) {
	v := m.endedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old "endedAt" field's value of the Score entity.
// If the Score object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScoreMutation) OldEndedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// ResetEndedAt resets all changes to the "endedAt" field.
func (m *ScoreMutation) ResetEndedAt() {
	m.endedAt = nil
}

// Where appends a list predicates to the ScoreMutation builder.
func (m *ScoreMutation) Where(ps ...predicate.Score) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Score, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Score).
func (m *ScoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScoreMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.keystrokes != nil {
		fields = append(fields, score.FieldKeystrokes)
	}
	if m.accuracy != nil {
		fields = append(fields, score.FieldAccuracy)
	}
	if m.score != nil {
		fields = append(fields, score.FieldScore)
	}
	if m.startedAt != nil {
		fields = append(fields, score.FieldStartedAt)
	}
	if m.endedAt != nil {
		fields = append(fields, score.FieldEndedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case score.FieldKeystrokes:
		return m.Keystrokes()
	case score.FieldAccuracy:
		return m.Accuracy()
	case score.FieldScore:
		return m.Score()
	case score.FieldStartedAt:
		return m.StartedAt()
	case score.FieldEndedAt:
		return m.EndedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case score.FieldKeystrokes:
		return m.OldKeystrokes(ctx)
	case score.FieldAccuracy:
		return m.OldAccuracy(ctx)
	case score.FieldScore:
		return m.OldScore(ctx)
	case score.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case score.FieldEndedAt:
		return m.OldEndedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Score field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case score.FieldKeystrokes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeystrokes(v)
		return nil
	case score.FieldAccuracy:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccuracy(v)
		return nil
	case score.FieldScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case score.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case score.FieldEndedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Score field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScoreMutation) AddedFields() []string {
	var fields []string
	if m.addkeystrokes != nil {
		fields = append(fields, score.FieldKeystrokes)
	}
	if m.addaccuracy != nil {
		fields = append(fields, score.FieldAccuracy)
	}
	if m.addscore != nil {
		fields = append(fields, score.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case score.FieldKeystrokes:
		return m.AddedKeystrokes()
	case score.FieldAccuracy:
		return m.AddedAccuracy()
	case score.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case score.FieldKeystrokes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKeystrokes(v)
		return nil
	case score.FieldAccuracy:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccuracy(v)
		return nil
	case score.FieldScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown Score numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Score nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScoreMutation) ResetField(name string) error {
	switch name {
	case score.FieldKeystrokes:
		m.ResetKeystrokes()
		return nil
	case score.FieldAccuracy:
		m.ResetAccuracy()
		return nil
	case score.FieldScore:
		m.ResetScore()
		return nil
	case score.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case score.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	}
	return fmt.Errorf("unknown Score field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScoreMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScoreMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScoreMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScoreMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Score unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScoreMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Score edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_MailAdress     *string
	_HandleName     *string
	_Name           *string
	_HashedPassword *string
	_Department     *user.Department
	clearedFields   map[string]struct{}
	scores          map[int]struct{}
	removedscores   map[int]struct{}
	clearedscores   bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMailAdress sets the "MailAdress" field.
func (m *UserMutation) SetMailAdress(s string) {
	m._MailAdress = &s
}

// MailAdress returns the value of the "MailAdress" field in the mutation.
func (m *UserMutation) MailAdress() (r string, exists bool) {
	v := m._MailAdress
	if v == nil {
		return
	}
	return *v, true
}

// OldMailAdress returns the old "MailAdress" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMailAdress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMailAdress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMailAdress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMailAdress: %w", err)
	}
	return oldValue.MailAdress, nil
}

// ResetMailAdress resets all changes to the "MailAdress" field.
func (m *UserMutation) ResetMailAdress() {
	m._MailAdress = nil
}

// SetHandleName sets the "HandleName" field.
func (m *UserMutation) SetHandleName(s string) {
	m._HandleName = &s
}

// HandleName returns the value of the "HandleName" field in the mutation.
func (m *UserMutation) HandleName() (r string, exists bool) {
	v := m._HandleName
	if v == nil {
		return
	}
	return *v, true
}

// OldHandleName returns the old "HandleName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHandleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHandleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHandleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandleName: %w", err)
	}
	return oldValue.HandleName, nil
}

// ResetHandleName resets all changes to the "HandleName" field.
func (m *UserMutation) ResetHandleName() {
	m._HandleName = nil
}

// SetName sets the "Name" field.
func (m *UserMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *UserMutation) ResetName() {
	m._Name = nil
}

// SetHashedPassword sets the "HashedPassword" field.
func (m *UserMutation) SetHashedPassword(s string) {
	m._HashedPassword = &s
}

// HashedPassword returns the value of the "HashedPassword" field in the mutation.
func (m *UserMutation) HashedPassword() (r string, exists bool) {
	v := m._HashedPassword
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPassword returns the old "HashedPassword" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPassword: %w", err)
	}
	return oldValue.HashedPassword, nil
}

// ResetHashedPassword resets all changes to the "HashedPassword" field.
func (m *UserMutation) ResetHashedPassword() {
	m._HashedPassword = nil
}

// SetDepartment sets the "Department" field.
func (m *UserMutation) SetDepartment(u user.Department) {
	m._Department = &u
}

// Department returns the value of the "Department" field in the mutation.
func (m *UserMutation) Department() (r user.Department, exists bool) {
	v := m._Department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "Department" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDepartment(ctx context.Context) (v user.Department, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "Department" field.
func (m *UserMutation) ResetDepartment() {
	m._Department = nil
}

// AddScoreIDs adds the "scores" edge to the Score entity by ids.
func (m *UserMutation) AddScoreIDs(ids ...int) {
	if m.scores == nil {
		m.scores = make(map[int]struct{})
	}
	for i := range ids {
		m.scores[ids[i]] = struct{}{}
	}
}

// ClearScores clears the "scores" edge to the Score entity.
func (m *UserMutation) ClearScores() {
	m.clearedscores = true
}

// ScoresCleared reports if the "scores" edge to the Score entity was cleared.
func (m *UserMutation) ScoresCleared() bool {
	return m.clearedscores
}

// RemoveScoreIDs removes the "scores" edge to the Score entity by IDs.
func (m *UserMutation) RemoveScoreIDs(ids ...int) {
	if m.removedscores == nil {
		m.removedscores = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.scores, ids[i])
		m.removedscores[ids[i]] = struct{}{}
	}
}

// RemovedScores returns the removed IDs of the "scores" edge to the Score entity.
func (m *UserMutation) RemovedScoresIDs() (ids []int) {
	for id := range m.removedscores {
		ids = append(ids, id)
	}
	return
}

// ScoresIDs returns the "scores" edge IDs in the mutation.
func (m *UserMutation) ScoresIDs() (ids []int) {
	for id := range m.scores {
		ids = append(ids, id)
	}
	return
}

// ResetScores resets all changes to the "scores" edge.
func (m *UserMutation) ResetScores() {
	m.scores = nil
	m.clearedscores = false
	m.removedscores = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._MailAdress != nil {
		fields = append(fields, user.FieldMailAdress)
	}
	if m._HandleName != nil {
		fields = append(fields, user.FieldHandleName)
	}
	if m._Name != nil {
		fields = append(fields, user.FieldName)
	}
	if m._HashedPassword != nil {
		fields = append(fields, user.FieldHashedPassword)
	}
	if m._Department != nil {
		fields = append(fields, user.FieldDepartment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldMailAdress:
		return m.MailAdress()
	case user.FieldHandleName:
		return m.HandleName()
	case user.FieldName:
		return m.Name()
	case user.FieldHashedPassword:
		return m.HashedPassword()
	case user.FieldDepartment:
		return m.Department()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldMailAdress:
		return m.OldMailAdress(ctx)
	case user.FieldHandleName:
		return m.OldHandleName(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldHashedPassword:
		return m.OldHashedPassword(ctx)
	case user.FieldDepartment:
		return m.OldDepartment(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldMailAdress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMailAdress(v)
		return nil
	case user.FieldHandleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandleName(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldHashedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPassword(v)
		return nil
	case user.FieldDepartment:
		v, ok := value.(user.Department)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldMailAdress:
		m.ResetMailAdress()
		return nil
	case user.FieldHandleName:
		m.ResetHandleName()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldHashedPassword:
		m.ResetHashedPassword()
		return nil
	case user.FieldDepartment:
		m.ResetDepartment()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.scores != nil {
		edges = append(edges, user.EdgeScores)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeScores:
		ids := make([]ent.Value, 0, len(m.scores))
		for id := range m.scores {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedscores != nil {
		edges = append(edges, user.EdgeScores)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeScores:
		ids := make([]ent.Value, 0, len(m.removedscores))
		for id := range m.removedscores {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscores {
		edges = append(edges, user.EdgeScores)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeScores:
		return m.clearedscores
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeScores:
		m.ResetScores()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
