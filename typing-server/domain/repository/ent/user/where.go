// Code generated by ent, DO NOT EDIT.

package user

import (
	"ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// MailAdress applies equality check predicate on the "MailAdress" field. It's identical to MailAdressEQ.
func MailAdress(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMailAdress, v))
}

// HandleName applies equality check predicate on the "HandleName" field. It's identical to HandleNameEQ.
func HandleName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHandleName, v))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// HashedPassword applies equality check predicate on the "HashedPassword" field. It's identical to HashedPasswordEQ.
func HashedPassword(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashedPassword, v))
}

// MailAdressEQ applies the EQ predicate on the "MailAdress" field.
func MailAdressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMailAdress, v))
}

// MailAdressNEQ applies the NEQ predicate on the "MailAdress" field.
func MailAdressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMailAdress, v))
}

// MailAdressIn applies the In predicate on the "MailAdress" field.
func MailAdressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMailAdress, vs...))
}

// MailAdressNotIn applies the NotIn predicate on the "MailAdress" field.
func MailAdressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMailAdress, vs...))
}

// MailAdressGT applies the GT predicate on the "MailAdress" field.
func MailAdressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMailAdress, v))
}

// MailAdressGTE applies the GTE predicate on the "MailAdress" field.
func MailAdressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMailAdress, v))
}

// MailAdressLT applies the LT predicate on the "MailAdress" field.
func MailAdressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMailAdress, v))
}

// MailAdressLTE applies the LTE predicate on the "MailAdress" field.
func MailAdressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMailAdress, v))
}

// MailAdressContains applies the Contains predicate on the "MailAdress" field.
func MailAdressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMailAdress, v))
}

// MailAdressHasPrefix applies the HasPrefix predicate on the "MailAdress" field.
func MailAdressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMailAdress, v))
}

// MailAdressHasSuffix applies the HasSuffix predicate on the "MailAdress" field.
func MailAdressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMailAdress, v))
}

// MailAdressEqualFold applies the EqualFold predicate on the "MailAdress" field.
func MailAdressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMailAdress, v))
}

// MailAdressContainsFold applies the ContainsFold predicate on the "MailAdress" field.
func MailAdressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMailAdress, v))
}

// HandleNameEQ applies the EQ predicate on the "HandleName" field.
func HandleNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHandleName, v))
}

// HandleNameNEQ applies the NEQ predicate on the "HandleName" field.
func HandleNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHandleName, v))
}

// HandleNameIn applies the In predicate on the "HandleName" field.
func HandleNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHandleName, vs...))
}

// HandleNameNotIn applies the NotIn predicate on the "HandleName" field.
func HandleNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHandleName, vs...))
}

// HandleNameGT applies the GT predicate on the "HandleName" field.
func HandleNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHandleName, v))
}

// HandleNameGTE applies the GTE predicate on the "HandleName" field.
func HandleNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHandleName, v))
}

// HandleNameLT applies the LT predicate on the "HandleName" field.
func HandleNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHandleName, v))
}

// HandleNameLTE applies the LTE predicate on the "HandleName" field.
func HandleNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHandleName, v))
}

// HandleNameContains applies the Contains predicate on the "HandleName" field.
func HandleNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHandleName, v))
}

// HandleNameHasPrefix applies the HasPrefix predicate on the "HandleName" field.
func HandleNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHandleName, v))
}

// HandleNameHasSuffix applies the HasSuffix predicate on the "HandleName" field.
func HandleNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHandleName, v))
}

// HandleNameEqualFold applies the EqualFold predicate on the "HandleName" field.
func HandleNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHandleName, v))
}

// HandleNameContainsFold applies the ContainsFold predicate on the "HandleName" field.
func HandleNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHandleName, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// HashedPasswordEQ applies the EQ predicate on the "HashedPassword" field.
func HashedPasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashedPassword, v))
}

// HashedPasswordNEQ applies the NEQ predicate on the "HashedPassword" field.
func HashedPasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHashedPassword, v))
}

// HashedPasswordIn applies the In predicate on the "HashedPassword" field.
func HashedPasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHashedPassword, vs...))
}

// HashedPasswordNotIn applies the NotIn predicate on the "HashedPassword" field.
func HashedPasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHashedPassword, vs...))
}

// HashedPasswordGT applies the GT predicate on the "HashedPassword" field.
func HashedPasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHashedPassword, v))
}

// HashedPasswordGTE applies the GTE predicate on the "HashedPassword" field.
func HashedPasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHashedPassword, v))
}

// HashedPasswordLT applies the LT predicate on the "HashedPassword" field.
func HashedPasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHashedPassword, v))
}

// HashedPasswordLTE applies the LTE predicate on the "HashedPassword" field.
func HashedPasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHashedPassword, v))
}

// HashedPasswordContains applies the Contains predicate on the "HashedPassword" field.
func HashedPasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHashedPassword, v))
}

// HashedPasswordHasPrefix applies the HasPrefix predicate on the "HashedPassword" field.
func HashedPasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHashedPassword, v))
}

// HashedPasswordHasSuffix applies the HasSuffix predicate on the "HashedPassword" field.
func HashedPasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHashedPassword, v))
}

// HashedPasswordEqualFold applies the EqualFold predicate on the "HashedPassword" field.
func HashedPasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHashedPassword, v))
}

// HashedPasswordContainsFold applies the ContainsFold predicate on the "HashedPassword" field.
func HashedPasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHashedPassword, v))
}

// DepartmentEQ applies the EQ predicate on the "Department" field.
func DepartmentEQ(v Department) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "Department" field.
func DepartmentNEQ(v Department) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "Department" field.
func DepartmentIn(vs ...Department) predicate.User {
	return predicate.User(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "Department" field.
func DepartmentNotIn(vs ...Department) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDepartment, vs...))
}

// HasScores applies the HasEdge predicate on the "scores" edge.
func HasScores() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScoresTable, ScoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScoresWith applies the HasEdge predicate on the "scores" edge with a given conditions (other predicates).
func HasScoresWith(preds ...predicate.Score) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newScoresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
